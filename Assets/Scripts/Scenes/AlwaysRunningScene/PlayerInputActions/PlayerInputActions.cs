//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Scenes/AlwaysRunningScene/PlayerInputActions/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""36170515-51c4-4db0-8bbb-6225dd8f7486"",
            ""actions"": [
                {
                    ""name"": ""BasicMovement"",
                    ""type"": ""Value"",
                    ""id"": ""400a7934-9eb7-46e7-aa3a-213735d13219"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""1bb81ed6-9b1d-4ed6-8027-a64b0593a202"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Respawn"",
                    ""type"": ""Button"",
                    ""id"": ""543ebf60-cb5f-46a4-9af1-fedb603d0902"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""e2b57883-7dae-44fd-ad0c-c111c8720bea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OptionsMenu"",
                    ""type"": ""Button"",
                    ""id"": ""8a7d0143-4922-43fa-a5e4-644b765d4fff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9b909634-d300-4969-a398-51c5ff498aef"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a4a52f15-68aa-45a3-82aa-160e98093e36"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cec48a54-0136-4a2d-90d6-2a33cb9eb1f5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""a455c78e-8f83-4957-898a-04cbe3780da4"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""b2b9407c-c385-4ebc-be97-c9accbc2f225"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BasicMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""82fb145e-26dd-403e-8107-10c24ab5910c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8927f11-0e32-412c-82ce-c220779333fd"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": ""MultiTap(tapDelay=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Respawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af6f9fc8-85fd-4c77-8077-0131e4512e31"",
                    ""path"": ""<Keyboard>/backspace"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eba6f351-429b-4c7e-bb34-417cf30dc89c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OptionsMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""RebindAuxiliarMenu"",
            ""id"": ""86a4a4f5-3490-49b9-ad40-7e5f759a5d65"",
            ""actions"": [],
            ""bindings"": []
        },
        {
            ""name"": ""RecordOnCommand"",
            ""id"": ""ec5e619d-1ab2-4d34-93a9-7098759123a9"",
            ""actions"": [
                {
                    ""name"": ""InitiateRecording"",
                    ""type"": ""Button"",
                    ""id"": ""cc8f009c-8673-477c-a7f9-f8b9920609b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""StopRecording"",
                    ""type"": ""Button"",
                    ""id"": ""f744ceeb-72ec-4ac4-9a17-83482af88422"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac005b60-d93c-41ec-a9fc-a060ccea196c"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InitiateRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e92c39c-1af4-4b2d-8965-2b4895f778b4"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StopRecording"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_BasicMovement = m_PlayerMovement.FindAction("BasicMovement", throwIfNotFound: true);
        m_PlayerMovement_Jump = m_PlayerMovement.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMovement_Respawn = m_PlayerMovement.FindAction("Respawn", throwIfNotFound: true);
        m_PlayerMovement_Restart = m_PlayerMovement.FindAction("Restart", throwIfNotFound: true);
        m_PlayerMovement_OptionsMenu = m_PlayerMovement.FindAction("OptionsMenu", throwIfNotFound: true);
        // RebindAuxiliarMenu
        m_RebindAuxiliarMenu = asset.FindActionMap("RebindAuxiliarMenu", throwIfNotFound: true);
        // RecordOnCommand
        m_RecordOnCommand = asset.FindActionMap("RecordOnCommand", throwIfNotFound: true);
        m_RecordOnCommand_InitiateRecording = m_RecordOnCommand.FindAction("InitiateRecording", throwIfNotFound: true);
        m_RecordOnCommand_StopRecording = m_RecordOnCommand.FindAction("StopRecording", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private List<IPlayerMovementActions> m_PlayerMovementActionsCallbackInterfaces = new List<IPlayerMovementActions>();
    private readonly InputAction m_PlayerMovement_BasicMovement;
    private readonly InputAction m_PlayerMovement_Jump;
    private readonly InputAction m_PlayerMovement_Respawn;
    private readonly InputAction m_PlayerMovement_Restart;
    private readonly InputAction m_PlayerMovement_OptionsMenu;
    public struct PlayerMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BasicMovement => m_Wrapper.m_PlayerMovement_BasicMovement;
        public InputAction @Jump => m_Wrapper.m_PlayerMovement_Jump;
        public InputAction @Respawn => m_Wrapper.m_PlayerMovement_Respawn;
        public InputAction @Restart => m_Wrapper.m_PlayerMovement_Restart;
        public InputAction @OptionsMenu => m_Wrapper.m_PlayerMovement_OptionsMenu;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Add(instance);
            @BasicMovement.started += instance.OnBasicMovement;
            @BasicMovement.performed += instance.OnBasicMovement;
            @BasicMovement.canceled += instance.OnBasicMovement;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Respawn.started += instance.OnRespawn;
            @Respawn.performed += instance.OnRespawn;
            @Respawn.canceled += instance.OnRespawn;
            @Restart.started += instance.OnRestart;
            @Restart.performed += instance.OnRestart;
            @Restart.canceled += instance.OnRestart;
            @OptionsMenu.started += instance.OnOptionsMenu;
            @OptionsMenu.performed += instance.OnOptionsMenu;
            @OptionsMenu.canceled += instance.OnOptionsMenu;
        }

        private void UnregisterCallbacks(IPlayerMovementActions instance)
        {
            @BasicMovement.started -= instance.OnBasicMovement;
            @BasicMovement.performed -= instance.OnBasicMovement;
            @BasicMovement.canceled -= instance.OnBasicMovement;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Respawn.started -= instance.OnRespawn;
            @Respawn.performed -= instance.OnRespawn;
            @Respawn.canceled -= instance.OnRespawn;
            @Restart.started -= instance.OnRestart;
            @Restart.performed -= instance.OnRestart;
            @Restart.canceled -= instance.OnRestart;
            @OptionsMenu.started -= instance.OnOptionsMenu;
            @OptionsMenu.performed -= instance.OnOptionsMenu;
            @OptionsMenu.canceled -= instance.OnOptionsMenu;
        }

        public void RemoveCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // RebindAuxiliarMenu
    private readonly InputActionMap m_RebindAuxiliarMenu;
    private List<IRebindAuxiliarMenuActions> m_RebindAuxiliarMenuActionsCallbackInterfaces = new List<IRebindAuxiliarMenuActions>();
    public struct RebindAuxiliarMenuActions
    {
        private @PlayerInputActions m_Wrapper;
        public RebindAuxiliarMenuActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputActionMap Get() { return m_Wrapper.m_RebindAuxiliarMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RebindAuxiliarMenuActions set) { return set.Get(); }
        public void AddCallbacks(IRebindAuxiliarMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_RebindAuxiliarMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RebindAuxiliarMenuActionsCallbackInterfaces.Add(instance);
        }

        private void UnregisterCallbacks(IRebindAuxiliarMenuActions instance)
        {
        }

        public void RemoveCallbacks(IRebindAuxiliarMenuActions instance)
        {
            if (m_Wrapper.m_RebindAuxiliarMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRebindAuxiliarMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_RebindAuxiliarMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RebindAuxiliarMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RebindAuxiliarMenuActions @RebindAuxiliarMenu => new RebindAuxiliarMenuActions(this);

    // RecordOnCommand
    private readonly InputActionMap m_RecordOnCommand;
    private List<IRecordOnCommandActions> m_RecordOnCommandActionsCallbackInterfaces = new List<IRecordOnCommandActions>();
    private readonly InputAction m_RecordOnCommand_InitiateRecording;
    private readonly InputAction m_RecordOnCommand_StopRecording;
    public struct RecordOnCommandActions
    {
        private @PlayerInputActions m_Wrapper;
        public RecordOnCommandActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InitiateRecording => m_Wrapper.m_RecordOnCommand_InitiateRecording;
        public InputAction @StopRecording => m_Wrapper.m_RecordOnCommand_StopRecording;
        public InputActionMap Get() { return m_Wrapper.m_RecordOnCommand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RecordOnCommandActions set) { return set.Get(); }
        public void AddCallbacks(IRecordOnCommandActions instance)
        {
            if (instance == null || m_Wrapper.m_RecordOnCommandActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_RecordOnCommandActionsCallbackInterfaces.Add(instance);
            @InitiateRecording.started += instance.OnInitiateRecording;
            @InitiateRecording.performed += instance.OnInitiateRecording;
            @InitiateRecording.canceled += instance.OnInitiateRecording;
            @StopRecording.started += instance.OnStopRecording;
            @StopRecording.performed += instance.OnStopRecording;
            @StopRecording.canceled += instance.OnStopRecording;
        }

        private void UnregisterCallbacks(IRecordOnCommandActions instance)
        {
            @InitiateRecording.started -= instance.OnInitiateRecording;
            @InitiateRecording.performed -= instance.OnInitiateRecording;
            @InitiateRecording.canceled -= instance.OnInitiateRecording;
            @StopRecording.started -= instance.OnStopRecording;
            @StopRecording.performed -= instance.OnStopRecording;
            @StopRecording.canceled -= instance.OnStopRecording;
        }

        public void RemoveCallbacks(IRecordOnCommandActions instance)
        {
            if (m_Wrapper.m_RecordOnCommandActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IRecordOnCommandActions instance)
        {
            foreach (var item in m_Wrapper.m_RecordOnCommandActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_RecordOnCommandActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public RecordOnCommandActions @RecordOnCommand => new RecordOnCommandActions(this);
    public interface IPlayerMovementActions
    {
        void OnBasicMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRespawn(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnOptionsMenu(InputAction.CallbackContext context);
    }
    public interface IRebindAuxiliarMenuActions
    {
    }
    public interface IRecordOnCommandActions
    {
        void OnInitiateRecording(InputAction.CallbackContext context);
        void OnStopRecording(InputAction.CallbackContext context);
    }
}
